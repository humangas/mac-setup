#!/bin/bash
#########################################################################################################
# Installation shell for macOS setup
#
# Usage:
# Install all:                  $ bash install
# Install specified roles: e.g. $ bash install --tags dotfiles
# Show roles:                   $ bash install --show
# Show Usage:                   $ bash install --help
#
# See also: https://github.com/humangas/mac-setup
#########################################################################################################

# Const
readonly REPOSITORY_NAME='github.com/humangas/mac-setup'

# Check HTTP Status
function check_http_status() {
  httpstatus=`curl -LI https://${REPOSITORY_NAME} -o /dev/null -w '%{http_code}\n' -s`
  if [ "$httpstatus" -ne 200 ]; then
    echo 'Error Could not connect: '"https://${REPOSITORY_NAME}" "HTTP_STATUS: $httpstatus"
    exit 1
  fi
}

# Install Homebrew
function install_homebrew() {
  which brew > /dev/null 2>&1
  if [ "$?" -ne 0 ]; then
    echo 'Install Homebrew...'
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  else
    echo 'Homebrew has already been installed.'
  fi
}

# Install Ansible
function install_ansible() {
  which ansible > /dev/null 2>&1
  if [ "$?" -ne 0 ]; then
    echo "Install ansible..."
    brew install ansible
  else
    echo 'Ansible has already been installed.'
  fi
}

# Download Setup Repository
function download_setup_repository() {
  echo 'Download Setup Repository...'
  curl -L https://${REPOSITORY_NAME}/archive/master.tar.gz -# | tar xz -C ${worktmpdir} --strip=1
}

# Check zsh
function check_zsh() {
  [ $SHELL == '/usr/local/bin/zsh' ] && return 0
}

# Execute Ansible Playbook
function execute_ansible() {
  local workdir=${worktmpdir:-'.'}
  echo 'Execute Ansible Playbook...'
  check_zsh
  if [ $? -eq 0 ]; then
    echo "-> $ ansible-playbook ${workdir}/ansible/site.yml" -vv "$@"
    ansible-playbook ${workdir}/ansible/site.yml -vv "$@"
  else
    echo "-> $ ansible-playbook ${workdir}/ansible/site.yml --ask-become-pass" -vv "$@"
    ansible-playbook ${workdir}/ansible/site.yml --ask-become-pass -vv "$@"
  fi
}

# Check Local Execute
function check_local_exec() {
  which git > /dev/null 2>&1
  [ "$?" -ne 0 ] && return 1
 
  local search_repo_name=$(echo $REPOSITORY_NAME | sed -e 's/github.com\///')
  local repo_name=$(git config -l | grep 'remote.origin.url' | cut -d= -f2 | grep "$search_repo_name")
  [ ! -z $repo_name ] && return 0
}

# Show roles and tags
function show_roles() {
  echo "Usage: $ bash install --tags <name>"
  grep -ve '.*#.*' ansible/site.yml | grep -oe '- { role:.*}*'
}

# Show Usage
function show_usage(){
    echo "Installation shell for macOS setup"
    echo ""
    echo "Usage:"
    echo "Install all:                  $ bash install"
    echo "Install specified roles: e.g. $ bash install --tags dotfiles"
    echo "Show roles:                   $ bash install --show"
    echo "Show Usage:                   $ bash install --help"
    echo ""
    echo "See also: https://github.com/humangas/mac-setup"
    echo ""
}

# Finally
function finally() {
    rm -rf ansible.cfg
    rm -rf hosts
}

# Main
function main() {
  check_local_exec
  if [ $? -ne 0 ]; then
    check_http_status
    worktmpdir=`mktemp -d`
    trap "${worktmpdir}" 0 1 2 3 15
    download_setup_repository
    install_homebrew
    install_ansible
  fi
  execute_ansible "$@"
}

trap finally 0 1 2 3 15

case "$1" in
  --show) show_roles ;;
  --help) show_usage ;;
    *)    main $@ ;;
esac
